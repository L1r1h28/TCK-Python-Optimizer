{
  "summary": {
    "total_files": 19,
    "total_lines": 1618,
    "average_complexity": 13.16,
    "dependency_issues": 0,
    "duplicate_functions": 34,
    "duplicate_classes": 2
  },
  "file_analyses": {
    "cases\\case_001_list_lookup.py": {
      "file_path": "case_001_list_lookup.py",
      "lines_of_code": 55,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 19,
          "args_count": 0,
          "docstring": "準備測試資料：一個大列表和一些要搜尋的項目"
        },
        {
          "name": "unoptimized_version",
          "line_start": 26,
          "args_count": 2,
          "docstring": "❌ 基準版本：使用 list 進行線性查找 O(n)"
        },
        {
          "name": "optimized_v1_set_lookup",
          "line_start": 37,
          "args_count": 2,
          "docstring": "✅ 優化版本 V1：使用 set 進行雜湊查找 O(1)"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [
          "random"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 7
    },
    "cases\\case_002_for_loop_vectorization.py": {
      "file_path": "case_002_for_loop_vectorization.py",
      "lines_of_code": 107,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 19,
          "args_count": 0,
          "docstring": "準備針對性測試資料，涵蓋不同規模"
        },
        {
          "name": "unoptimized_version",
          "line_start": 28,
          "args_count": 1,
          "docstring": "❌ 原始版本：傳統 for 迴圈 + 顯式條件處理"
        },
        {
          "name": "optimized_v1_numpy_vectorization",
          "line_start": 51,
          "args_count": 1,
          "docstring": "✅ 優化 V1：NumPy 向量化運算"
        },
        {
          "name": "optimized_v2_list_comprehension",
          "line_start": 81,
          "args_count": 1,
          "docstring": "✅ 優化 V2：列表推導式 (適用於小資料)"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [
          "numpy"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 19
    },
    "cases\\case_003_config_cache.py": {
      "file_path": "case_003_config_cache.py",
      "lines_of_code": 81,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 25,
          "args_count": 0,
          "docstring": "準備測試資料：建立一個暫存的 JSON 設定檔"
        },
        {
          "name": "cleanup_data",
          "line_start": 42,
          "args_count": 2,
          "docstring": "清理測試資料：刪除暫存檔案"
        },
        {
          "name": "unoptimized_version",
          "line_start": 52,
          "args_count": 2,
          "docstring": "❌ 原始版本：在迴圈中重複讀取和解析檔案"
        },
        {
          "name": "load_config_lru_cached",
          "line_start": 64,
          "args_count": 1,
          "docstring": "使用 @lru_cache 裝飾器實現自動快取的載入函式"
        },
        {
          "name": "optimized_v1_lru_cache",
          "line_start": 69,
          "args_count": 2,
          "docstring": "✅ 優化 V1：使用 functools.lru_cache 實現記憶體快取"
        }
      ],
      "imports": {
        "standard_library": [
          "json",
          "os"
        ],
        "third_party": [
          "tempfile",
          "functools"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 14
    },
    "cases\\case_004_string_concatenation.py": {
      "file_path": "case_004_string_concatenation.py",
      "lines_of_code": 47,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 15,
          "args_count": 0,
          "docstring": "準備測試資料"
        },
        {
          "name": "unoptimized_version",
          "line_start": 21,
          "args_count": 1,
          "docstring": "❌ 原始版本：字串累加 O(n²)\n\n效能問題：\n- 每次 += 都要創建新字串物件\n- 複製之前的所有字元\n- 記憶體使用量呈指數增長"
        },
        {
          "name": "optimized_version_join",
          "line_start": 34,
          "args_count": 1,
          "docstring": "✅ 優化版本：join() O(n)\n\n優化策略：\n- 使用 join() 方法只做一次記憶體分配\n- 預先計算總長度，避免重複分配\n- 線性時間複雜度 O(n)"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 6
    },
    "cases\\case_005_dictionary_lookup.py": {
      "file_path": "case_005_dictionary_lookup.py",
      "lines_of_code": 123,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 18,
          "args_count": 0,
          "docstring": "準備測試資料 - 高缺失率場景（80% 缺失）"
        },
        {
          "name": "unoptimized_version",
          "line_start": 31,
          "args_count": 2,
          "docstring": "❌ 原始版本：高頻異常處理\n\n在 80% 缺失率下：\n- 8000 次 KeyError 異常創建和捕獲\n- 每次異常都要構建異常物件、回溯信息\n- 異常處理機制涉及棧展開和清理"
        },
        {
          "name": "optimized_version_get_simple",
          "line_start": 48,
          "args_count": 2,
          "docstring": "✅ 基礎優化：dict.get() 列表推導\n\n簡潔的 dict.get() 實現：\n- 無異常開銷\n- 列表推導式的 C 層級優化"
        },
        {
          "name": "optimized_version_get_loop",
          "line_start": 57,
          "args_count": 2,
          "docstring": "✅ 對照組：dict.get() for迴圈\n\n展現列表推導 vs for迴圈的差異：\n- 同樣使用 dict.get() 避免異常\n- 但使用傳統 for 迴圈結構"
        },
        {
          "name": "optimized_version_defaultdict_lambda",
          "line_start": 69,
          "args_count": 2,
          "docstring": "✅ 進階優化：defaultdict + lambda\n\n使用 __missing__ 機制：\n- lambda 函數作為 default_factory\n- 自動處理缺失鍵，無需顯式檢查"
        },
        {
          "name": "optimized_version_defaultdict_constant",
          "line_start": 81,
          "args_count": 2,
          "docstring": "✅ 超級優化：defaultdict + 常數工廠\n\n避免 lambda 調用開銷：\n- 使用 str 作為 default_factory\n- 預設空字串，後續統一替換"
        },
        {
          "name": "optimized_version_batch_filter",
          "line_start": 98,
          "args_count": 2,
          "docstring": "✅ 終極優化：批量過濾策略\n\n最小化字典查詢次數：\n- 預先過濾存在的鍵\n- 批量處理，避免逐一查詢"
        }
      ],
      "imports": {
        "standard_library": [
          "collections"
        ],
        "third_party": [
          "random"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 26
    },
    "cases\\case_005_dictionary_lookup_comprehensive.py": {
      "file_path": "case_005_dictionary_lookup_comprehensive.py",
      "lines_of_code": 145,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 18,
          "args_count": 0,
          "docstring": "準備測試資料 - 不同缺失率場景"
        },
        {
          "name": "unoptimized_version",
          "line_start": 32,
          "args_count": 2,
          "docstring": "❌ 原始版本：異常處理 try/except\n\n基於 DeepWiki 研究：\n- 'Actually catching an exception is expensive' (Doc/faq/design.rst)\n- 每次 KeyError 都要構建異常物件和回溯信息\n- 異常處理機制涉及棧展開和異常表查找"
        },
        {
          "name": "optimized_version_get",
          "line_start": 49,
          "args_count": 2,
          "docstring": "✅ 優化版本 1：dict.get() 方法\n\n基於 DeepWiki 研究：\n- dict.get() 在 Objects/dictobject.c 中的 C 實現避免異常機制\n- 直接檢查鍵的存在性，內部處理缺失情況\n- 無異常開銷，查詢失敗時返回預設值"
        },
        {
          "name": "optimized_version_defaultdict",
          "line_start": 59,
          "args_count": 2,
          "docstring": "✅ 優化版本 2：collections.defaultdict\n\n基於 DeepWiki 研究：\n- 使用 __missing__ 方法機制，在 Objects/dictobject.c 中實現\n- 自動調用 default_factory 提供缺失值\n- 避免顯式的鍵存在檢查，更簡潔的邏輯"
        },
        {
          "name": "optimized_version_setdefault",
          "line_start": 76,
          "args_count": 2,
          "docstring": "✅ 優化版本 3：dict.setdefault() 策略\n\n基於 DeepWiki 研究：\n- dict.setdefault() 單次查詢操作，在 Objects/dictobject.c 中實現\n- 如果鍵存在返回值，不存在則設置並返回預設值\n- 避免重複查詢，但會修改原字典\n\n注意：這個版本會修改字典，適合需要緩存結果的場景"
        },
        {
          "name": "optimized_version_in_check",
          "line_start": 95,
          "args_count": 2,
          "docstring": "✅ 優化版本 4：顯式 'in' 檢查\n\n基於 DeepWiki 研究：\n- 使用 'in' 操作符進行顯式存在檢查\n- 雙重查詢開銷，但邏輯清晰\n- 適合代碼可讀性要求高的場景"
        },
        {
          "name": "optimized_version_batch_get",
          "line_start": 111,
          "args_count": 2,
          "docstring": "✅ 超級優化版本：批量操作優化\n\n創新策略：\n- 將存在和不存在的鍵分批處理\n- 最小化異常處理和重複檢查\n- 利用集合運算快速分類"
        }
      ],
      "imports": {
        "standard_library": [
          "collections"
        ],
        "third_party": [
          "random"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 26
    },
    "cases\\case_006_set_operations.py": {
      "file_path": "case_006_set_operations.py",
      "lines_of_code": 50,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 13,
          "args_count": 0,
          "docstring": "準備測試資料"
        },
        {
          "name": "unoptimized_version",
          "line_start": 21,
          "args_count": 2,
          "docstring": "❌ 原始版本：列表推導式查找交集\n\n效能問題：\n- 對每個元素都要掃描整個第二個列表\n- 雙重迴圈，時間複雜度 O(n²)\n- 沒有利用雜湊查找優勢"
        },
        {
          "name": "optimized_version_set_intersection",
          "line_start": 34,
          "args_count": 2,
          "docstring": "✅ 優化版本：集合交集運算\n\n優化策略：\n- 使用集合內建交集運算 &\n- 雜湊表查找，時間複雜度 O(n)\n- 利用 Python 底層 C 實現"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 6
    },
    "cases\\case_007_deque_operations.py": {
      "file_path": "case_007_deque_operations.py",
      "lines_of_code": 49,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 15,
          "args_count": 0,
          "docstring": "準備測試資料 - 大規模數據以體現 O(n) vs O(1) 差異"
        },
        {
          "name": "unoptimized_version",
          "line_start": 20,
          "args_count": 1,
          "docstring": "❌ 原始版本：列表頭部插入 O(n)\n\n效能問題：\n- 每次 insert(0) 都要移動所有現有元素\n- 總時間複雜度 O(n²)\n- 記憶體重新分配頻繁"
        },
        {
          "name": "optimized_version_deque",
          "line_start": 33,
          "args_count": 1,
          "docstring": "✅ 優化版本：deque 頭部插入 O(1)\n\n優化策略：\n- deque 是雙向鏈結實現\n- appendleft() 常數時間操作\n- 總時間複雜度 O(n)"
        }
      ],
      "imports": {
        "standard_library": [
          "collections"
        ],
        "third_party": [],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 7
    },
    "cases\\case_008_memorization_cache.py": {
      "file_path": "case_008_memorization_cache.py",
      "lines_of_code": 62,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 15,
          "args_count": 0,
          "docstring": "準備測試資料"
        },
        {
          "name": "_fibonacci_recursive",
          "line_start": 23,
          "args_count": 1,
          "docstring": "純遞迴實現，無記憶化"
        },
        {
          "name": "unoptimized_version",
          "line_start": 29,
          "args_count": 1,
          "docstring": "❌ 原始版本：無快取的遞迴計算\n\n效能問題：\n- 重複計算相同的子問題\n- 指數時間複雜度 O(2^n)\n- 深度遞迴可能造成堆疊溢位"
        },
        {
          "name": "_fibonacci_memoized",
          "line_start": 41,
          "args_count": 1,
          "docstring": "記憶化版本，自動快取結果"
        },
        {
          "name": "optimized_version_lru_cache",
          "line_start": 47,
          "args_count": 1,
          "docstring": "✅ 優化版本：@lru_cache 記憶化快取\n\n優化策略：\n- 使用 @lru_cache 自動快取結果\n- 避免重複計算相同參數\n- 線性時間複雜度 O(n)"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [
          "functools"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 11
    },
    "cases\\case_009_builtin_functions.py": {
      "file_path": "case_009_builtin_functions.py",
      "lines_of_code": 131,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 18,
          "args_count": 0,
          "docstring": "準備測試資料"
        },
        {
          "name": "unoptimized_version",
          "line_start": 24,
          "args_count": 1,
          "docstring": "❌ 原始版本：手動迴圈計算統計值\n\n效能問題：\n- Python 層級的迴圈計算\n- 重複遍歷資料集\n- 精度可能不如專業實現"
        },
        {
          "name": "optimized_version_builtins",
          "line_start": 62,
          "args_count": 1,
          "docstring": "✅ 優化版本 1：內建函數 + statistics 模組\n\n優化策略：\n- 使用 C 實現的內建函數 (max, min, sum)\n- statistics 模組提供更穩定和快速的統計實現\n- 程式碼更簡潔，可讀性更高"
        },
        {
          "name": "optimized_version_numpy",
          "line_start": 83,
          "args_count": 1,
          "docstring": "✅✅ 優化版本 2：NumPy 向量化計算\n\n超級優化：\n- 將資料轉換為 NumPy 陣列，利用 SIMD 指令進行並行計算\n- 所有計算都在 C/Fortran 層級完成，極大減少 Python 開銷\n- 一次性計算所有統計值，記憶體存取更高效"
        },
        {
          "name": "optimized_version_pandas",
          "line_start": 103,
          "args_count": 1,
          "docstring": "✅✅✅ 優化版本 3：Pandas Series\n\n超級優化：\n- 類似 NumPy，但提供更豐富的資料分析 API\n- .describe() 方法可以一次性生成多個統計指標，但需注意其預設行為"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [
          "statistics",
          "random",
          "numpy",
          "pandas"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 24
    },
    "cases\\case_010_comprehension_generator_combined.py": {
      "file_path": "case_010_comprehension_generator_combined.py",
      "lines_of_code": 149,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 22,
          "args_count": 0,
          "docstring": "準備測試資料 - 設計來暴露推導式瓶頸的特殊場景"
        },
        {
          "name": "unoptimized_version",
          "line_start": 33,
          "args_count": 2,
          "docstring": "❌ 原始版本：複雜條件推導式 (展示瓶頸)\n\n效能問題（基於 DeepWiki 研究）：\n- 多重複雜條件檢查\n- 每個元素都調用昂貴函數\n- 字串操作增加記憶體分配開銷\n- 推導式的優勢被函數調用開銷抵消"
        },
        {
          "name": "optimized_version_simple_comprehension",
          "line_start": 50,
          "args_count": 2,
          "docstring": "✅ 優化版本 1：簡化推導式 (減少函數調用)\n\n優化策略：\n- 預先篩選，減少昂貴函數調用次數\n- 先用便宜的條件過濾\n- 利用 Python 3.12 comprehension inlining 優勢"
        },
        {
          "name": "optimized_version_for_loop_with_cache",
          "line_start": 69,
          "args_count": 2,
          "docstring": "✅ 優化版本 2：for迴圈 + 快取 (控制函數調用)\n\n優化策略：\n- 使用傳統for迴圈獲得更多控制權\n- 快取昂貴函數的結果\n- 避免重複計算相同值"
        },
        {
          "name": "optimized_version_generator_pipeline",
          "line_start": 93,
          "args_count": 2,
          "docstring": "✅ 優化版本 3：生成器管道 (記憶體 + 懶評估)\n\n優化策略：\n- 使用生成器避免中間列表\n- 分階段過濾，最小化昂貴操作\n- 利用懶評估，只在需要時計算"
        },
        {
          "name": "optimized_version_numba_vectorized",
          "line_start": 113,
          "args_count": 2,
          "docstring": "✅ 優化版本 4：NumPy 向量化 (適用於數值計算)\n\n優化策略：\n- 將計算向量化，利用 NumPy/NumExpr\n- 避免 Python 層級的迴圈\n- 專門針對數值密集型運算優化"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [
          "math",
          "numpy"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 24
    },
    "cases\\case_011_iterator_chaining_combined.py": {
      "file_path": "case_011_iterator_chaining_combined.py",
      "lines_of_code": 100,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 16,
          "args_count": 0,
          "docstring": "準備測試資料"
        },
        {
          "name": "unoptimized_version",
          "line_start": 24,
          "args_count": 6,
          "docstring": "❌ 原始版本：暴力列表串接\n\n效能問題：\n- 創建一個包含 300 萬個元素的巨大臨時列表。\n- 極高的記憶體開銷和複製成本 (O(n) 記憶體)。\n- 仍然需要遍歷整個列表 (O(n) 時間)。"
        },
        {
          "name": "optimized_version_itertools_chain",
          "line_start": 43,
          "args_count": 6,
          "docstring": "✅ 優化版本 1：itertools.chain\n\n記憶體優化：\n- 使用 itertools.chain 避免創建臨時列表。\n- 記憶體複雜度降至 O(1)。\n- 執行時間複雜度仍為 O(n)，因為需要遍歷所有元素。"
        },
        {
          "name": "_count_multiples_in_range",
          "line_start": 63,
          "args_count": 3,
          "docstring": "計算範圍內能被 divisor 整除的數的數量"
        },
        {
          "name": "optimized_version_math_formula",
          "line_start": 80,
          "args_count": 6,
          "docstring": "✅✅ 超級優化版本 2：數學公式 O(1)\n\n演算法優化：\n- 使用數學公式直接計算結果。\n- 完全避免迴圈和條件檢查。\n- 時間複雜度降至 O(1)，實現終極效能。"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [
          "itertools"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 11
    },
    "cases\\case_012_dataclass.py": {
      "file_path": "case_012_dataclass.py",
      "lines_of_code": 73,
      "classes": [
        {
          "name": "ManualUser",
          "methods": [
            {
              "name": "__init__",
              "line_start": 26,
              "args_count": 4
            },
            {
              "name": "__repr__",
              "line_start": 31,
              "args_count": 1
            },
            {
              "name": "__eq__",
              "line_start": 34,
              "args_count": 2
            }
          ],
          "line_start": 25,
          "docstring": ""
        },
        {
          "name": "DataUser",
          "methods": [],
          "line_start": 53,
          "docstring": ""
        }
      ],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 15,
          "args_count": 0,
          "docstring": "準備測試資料"
        },
        {
          "name": "unoptimized_version",
          "line_start": 39,
          "args_count": 3,
          "docstring": "❌ 原始版本：手動實現類別\n\n效能問題：\n- 手動實現 __init__, __repr__, __eq__\n- Python 層級的方法調用\n- 大量樣板程式碼"
        },
        {
          "name": "optimized_version_dataclass",
          "line_start": 58,
          "args_count": 3,
          "docstring": "✅ 優化版本：@dataclass 自動生成\n\n優化策略：\n- 使用 @dataclass 自動生成方法\n- C 層級實現，效率更高\n- 程式碼簡潔，維護性佳"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [
          "dataclasses"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 17
    },
    "cases\\case_013_loop_lookup_combined.py": {
      "file_path": "case_013_loop_lookup_combined.py",
      "lines_of_code": 67,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 15,
          "args_count": 0,
          "docstring": "準備測試資料"
        },
        {
          "name": "unoptimized_version",
          "line_start": 22,
          "args_count": 2,
          "docstring": "❌ 原始版本：巢狀迴圈 O(n²)\n\n效能問題：\n- 對每個 list_a 元素都要掃描整個 list_b\n- 時間複雜度 O(n²)\n- 大量無用的比較操作"
        },
        {
          "name": "optimized_version_set_lookup",
          "line_start": 39,
          "args_count": 2,
          "docstring": "✅ 優化版本 1：集合查找 O(n)\n\n優化策略：\n- 將 list_b 轉換為集合，查找 O(1)\n- 單一迴圈，時間複雜度 O(n)"
        },
        {
          "name": "optimized_version_set_intersection",
          "line_start": 51,
          "args_count": 2,
          "docstring": "✅✅ 超級優化版本 2：一次性集合交集\n\n最終優化：\n- 直接使用集合交集運算子 &\n- C 層級實現，效率最高\n- 減少 Python 層級的迴圈開銷"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 8
    },
    "cases\\case_017_high_freq_calls.py": {
      "file_path": "case_017_high_freq_calls.py",
      "lines_of_code": 70,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 13,
          "args_count": 0,
          "docstring": "準備測試資料 - 模擬高頻調用場景"
        },
        {
          "name": "unoptimized_version",
          "line_start": 20,
          "args_count": 2,
          "docstring": "❌ 原始版本：高頻低效調用\n\n效能問題：\n- 每次迭代都調用 len(), str()\n- 重複計算不變數\n- 頻繁的字典 get() 操作"
        },
        {
          "name": "optimized_version_pre_caching",
          "line_start": 43,
          "args_count": 2,
          "docstring": "✅ 優化版本：預快取 + 迴圈不變數優化\n\n優化策略：\n- 預先快取所有迴圈不變數\n- 使用數學運算替代字串轉換\n- 減少不必要的字典創建和 get() 調用"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 6
    },
    "cases\\case_018_generator_expression.py": {
      "file_path": "case_018_generator_expression.py",
      "lines_of_code": 73,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 13,
          "args_count": 0,
          "docstring": "準備測試資料"
        },
        {
          "name": "unoptimized_version",
          "line_start": 19,
          "args_count": 1,
          "docstring": "❌ 原始版本：列表推導式一次性載入\n\n效能問題：\n- 一次性創建完整列表\n- 記憶體使用量與資料量成正比\n- 可能導致記憶體不足"
        },
        {
          "name": "optimized_version_generator",
          "line_start": 33,
          "args_count": 1,
          "docstring": "✅ 優化版本：生成器表達式惰性評估\n\n優化策略：\n- 使用生成器表達式惰性產生元素\n- 常數記憶體使用量\n- 按需計算，提早中斷"
        },
        {
          "name": "optimized_version_islice",
          "line_start": 53,
          "args_count": 1,
          "docstring": "✅✅ 超級優化版本：itertools.islice\n\n超級優化策略：\n- 使用 itertools.islice 進行高效切片\n- 避免手動計數和條件檢查\n- 更 Pythonic 的寫法"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [
          "itertools"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 9
    },
    "cases\\case_019_extended_data_processing.py": {
      "file_path": "case_019_extended_data_processing.py",
      "lines_of_code": 82,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 17,
          "args_count": 0,
          "docstring": "準備大規模測試資料來驗證高效能查詢處理"
        },
        {
          "name": "unoptimized_version",
          "line_start": 37,
          "args_count": 2,
          "docstring": "❌ 原始版本：極端暴力搜尋 + 完整排序"
        },
        {
          "name": "optimized_version_heap_index",
          "line_start": 53,
          "args_count": 2,
          "docstring": "✅ 優化版本：預索引 + 堆排序"
        }
      ],
      "imports": {
        "standard_library": [
          "collections"
        ],
        "third_party": [
          "random",
          "heapq"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 9
    },
    "cases\\case_020_function_call_overhead.py": {
      "file_path": "case_020_function_call_overhead.py",
      "lines_of_code": 66,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 13,
          "args_count": 0,
          "docstring": "準備測試資料來驗證函數調用開銷"
        },
        {
          "name": "_is_valid",
          "line_start": 20,
          "args_count": 1,
          "docstring": ""
        },
        {
          "name": "_multiply_by_two",
          "line_start": 21,
          "args_count": 1,
          "docstring": ""
        },
        {
          "name": "_add_one",
          "line_start": 22,
          "args_count": 1,
          "docstring": ""
        },
        {
          "name": "unoptimized_version",
          "line_start": 24,
          "args_count": 1,
          "docstring": "❌ 原始版本：極端頻繁函數調用"
        },
        {
          "name": "optimized_version_inlined",
          "line_start": 48,
          "args_count": 1,
          "docstring": "✅ 優化版本：完全內聯展開"
        }
      ],
      "imports": {
        "standard_library": [],
        "third_party": [],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 12
    },
    "cases\\case_021_nova_source_markdown.py": {
      "file_path": "case_021_nova_source_markdown.py",
      "lines_of_code": 88,
      "classes": [],
      "functions": [
        {
          "name": "setup_data",
          "line_start": 12,
          "args_count": 0,
          "docstring": "準備大規模 Markdown 測試資料"
        },
        {
          "name": "unoptimized_version",
          "line_start": 35,
          "args_count": 1,
          "docstring": "❌ 原始版本：低效的字串處理和條件檢查"
        },
        {
          "name": "optimized_version_regex",
          "line_start": 57,
          "args_count": 1,
          "docstring": "✅ 優化版本：應用 TCK 優化技術"
        }
      ],
      "imports": {
        "standard_library": [
          "re"
        ],
        "third_party": [
          "random"
        ],
        "local_imports": [],
        "relative_imports": []
      },
      "complexity_score": 8
    }
  },
  "dependency_issues": {
    "missing_imports": [],
    "circular_imports": [],
    "unused_imports": []
  },
  "duplicates": [
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_002_for_loop_vectorization.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_003_config_cache.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_001_list_lookup.py",
        "case_003_config_cache.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_004_string_concatenation.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_002_for_loop_vectorization.py",
        "case_004_string_concatenation.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_005_dictionary_lookup.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_001_list_lookup.py",
        "case_005_dictionary_lookup.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_005_dictionary_lookup_comprehensive.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_001_list_lookup.py",
        "case_005_dictionary_lookup_comprehensive.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_006_set_operations.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_001_list_lookup.py",
        "case_006_set_operations.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_007_deque_operations.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_002_for_loop_vectorization.py",
        "case_007_deque_operations.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_008_memorization_cache.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_002_for_loop_vectorization.py",
        "case_008_memorization_cache.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_009_builtin_functions.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_002_for_loop_vectorization.py",
        "case_009_builtin_functions.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_010_comprehension_generator_combined.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_001_list_lookup.py",
        "case_010_comprehension_generator_combined.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_011_iterator_chaining_combined.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_012_dataclass.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "class",
      "name": "ManualUser",
      "files": [
        "case_012_dataclass.py",
        "case_012_dataclass.py"
      ],
      "suggestion": "考慮合併或重命名類別 'ManualUser'"
    },
    {
      "type": "class",
      "name": "DataUser",
      "files": [
        "case_012_dataclass.py",
        "case_012_dataclass.py"
      ],
      "suggestion": "考慮合併或重命名類別 'DataUser'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_013_loop_lookup_combined.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_001_list_lookup.py",
        "case_013_loop_lookup_combined.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "optimized_version_set_intersection",
      "files": [
        "case_006_set_operations.py",
        "case_013_loop_lookup_combined.py"
      ],
      "suggestion": "考慮合併或重命名函數 'optimized_version_set_intersection'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_017_high_freq_calls.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_001_list_lookup.py",
        "case_017_high_freq_calls.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_018_generator_expression.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_002_for_loop_vectorization.py",
        "case_018_generator_expression.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_019_extended_data_processing.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_001_list_lookup.py",
        "case_019_extended_data_processing.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_020_function_call_overhead.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_002_for_loop_vectorization.py",
        "case_020_function_call_overhead.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    },
    {
      "type": "function",
      "name": "setup_data",
      "files": [
        "case_001_list_lookup.py",
        "case_021_nova_source_markdown.py"
      ],
      "suggestion": "考慮合併或重命名函數 'setup_data'"
    },
    {
      "type": "function",
      "name": "unoptimized_version",
      "files": [
        "case_002_for_loop_vectorization.py",
        "case_021_nova_source_markdown.py"
      ],
      "suggestion": "考慮合併或重命名函數 'unoptimized_version'"
    }
  ],
  "timestamp": "2025-10-05T03:00:24.629922"
}